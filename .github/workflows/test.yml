name: Build and Test

on: [push, pull_request]

env:
  BMI_VERSION: 2_0

jobs:
  build-test-unix:

    if:
      github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash -l {0}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
 
    steps:
      - uses: actions/checkout@v4

      - uses: mamba-org/setup-micromamba@v1
        with:
          micromamba-version: latest
          environment-name: testing
          create-args: >-
            make
            cmake
            pkg-config
            fortran-compiler

      - name: Make cmake build directory
        run: cmake -E make_directory build

      - name: Configure cmake
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake .. -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX -DCMAKE_BUILD_TYPE=Release

      - name: Build and install
        working-directory: ${{ github.workspace }}/build
        run: cmake --build . --target install --config Release

      - name: Test
        run: |
          test -f $CONDA_PREFIX/include/bmif_$BMI_VERSION.mod
          test -s $CONDA_PREFIX/lib/libbmif.a
          pkg-config --exists --print-errors bmif

      - name: Test (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: test -h $CONDA_PREFIX/lib/libbmif.so

      - name: Test (macOS)
        if: matrix.os == 'macos-latest'
        run: test -h $CONDA_PREFIX/lib/libbmif.dylib

  build-test-windows:
    if:
      github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: windows-latest

    env:
      LIBRARY_PREFIX: $env:CONDA_PREFIX\Library

    steps:
      - uses: actions/checkout@v4
      - uses: ilammy/msvc-dev-cmd@v1
      - uses: mamba-org/setup-micromamba@v1
        with:
          micromamba-version: latest
          environment-name: testing
          create-args: >-
            cmake
            pkg-config
            cxx-compiler
            fortran-compiler
          init-shell: >-
            powershell

      - name: Make cmake build directory
        run: cmake -E make_directory build

      - name: Configure, build, and install
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX="${{ env.LIBRARY_PREFIX }}" -DCMAKE_Fortran_COMPILER="${{ env.LIBRARY_PREFIX }}\bin\flang-new.exe" -DCMAKE_BUILD_TYPE=Release
          cmake --build . --target install --config Release

      - name: Check (for humans)
        working-directory: ${{ github.workspace }}/build
        run: |
          Test-Path -Path ${{ env.LIBRARY_PREFIX }}\lib\libbmif.dll.a
          Test-Path -Path ${{ env.LIBRARY_PREFIX }}\bin\libbmif.dll
          Test-Path -Path ${{ env.LIBRARY_PREFIX }}\include\bmif_${{ env.BMI_VERSION }}.mod
          Test-Path -Path ${{ env.LIBRARY_PREFIX }}\lib\libbmif_static.a
          pkg-config --exists --print-errors bmif

      - name: Test (for machines)
        working-directory: ${{ github.workspace }}/build
        run: |
          if ( -not ( Test-Path -Path ${{ env.LIBRARY_PREFIX }}\lib\libbmif.dll.a ) ){ exit 1 }
          if ( -not ( Test-Path -Path ${{ env.LIBRARY_PREFIX }}\bin\libbmif.dll ) ){ exit 1 }
          if ( -not ( Test-Path -Path ${{ env.LIBRARY_PREFIX }}\include\bmif_${{ env.BMI_VERSION }}.mod ) ){ exit 1 }
          if ( -not ( Test-Path -Path ${{ env.LIBRARY_PREFIX }}\lib\libbmif_static.a ) ){ exit 1 }
          if ( -not ( Test-Path -Path ${{ env.LIBRARY_PREFIX }}\lib\pkgconfig\bmif.pc ) ){ exit 1 }
